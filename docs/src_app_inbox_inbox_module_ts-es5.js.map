{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AAKA;;AACA;AACA,mEAAuDA,QAAvD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,kGACA,wEADA,GAEA,cAFA;AAGA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,0JAC0DC,GAD1D;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,4JAC0DC,OAD1D;AAEA;AACA;AACA;AACA;AACA;;;UACAC,gBACA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACAC;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,wDAAsDC,+DAAtD,EAA0EH,OAA1E,EADA,CAEA;;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,wDAAsDG,+DAAtD,EAA0EH,OAA1E;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA,+CAA6CG,uEAA7C,EAAyEC,OAAzE;;AACA;AACA;AACA;;AACA;;AACA;AACA,qBAAmB,0CAAEC,oBAAF,CAAnB;AACA;;AACA,sFAAkF,qDAAG;AAAA;AAAA,aAAH,CAAlF,EAAoI,qDAAG;AAAA;AAAA,aAAH,CAApI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;AACA;;AACA,uDAFA,CAGA;;;AACA;AACA;AACA,aANA,CAOA;;;AACAC;;AACA;AACA;;AACA;AACA,aAZA,CAaA;;;AACA;;AACA;AACA;AACA;;AACA,mBAAe,kDAAUC,iCAAV,CAAf;AACA;;;iBACA;AACA;;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA,qBAAmB,0CAAEF,4CAAF,CAAnB;AACA,aAHA,MAIA;AACA;AACA,8DAA4D,qDAAG;AAAA;AAAA,eAAH,CAA5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA,qBAAmB,0CAAEG,SAAF,CAAnB;AACA,aATA,CAUA;AACA;;;AACA,sDACAC,MADA,CACA;AAAA;AAAA,aADA,EAEAC,GAFA,CAEA;AACA,0EAAsE,4DAAU;AAChF,qDAAqDP,uEAArD,EAAiFQ,iBAAjF,EADgF,CAEhF;AACA;;;AACA,mEAA8DZ,GAA9D,sBAA6Ea,WAA7E;;AACA;;AACA,uBAAuB,0CAAE,IAAF,CAAvB;AACa,eAPyD,CAAtE;AAQS,aAXT,EAZA,CAwBA;AACA;;AACA,mBAAe,gDAAQC,oBAAR,EAAQC,IAAR,CAAoC,qDAAG;AACtD,0FADsD,CAEtD;;;AACA;AACA;AACA;;AACA;AACS,aAP0C,CAApC,CAAf;AAQA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,oDAAgDC,MAAhD,EAAwDA,GAAxD,EAAwD;AACxD,6CADwD,CAExD;AACA;AACA;AACA;;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA,gDAA4C,qDAAG;AAAA;AAAA,aAAH,CAA5C,EAAsF,qDAAG;AAAA;AAAA,aAAH,CAAtF;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,qBAAmB,0CAAE,IAAF,CAAnB;AACA;;AACA,gDAA4C,qDAAG;AAAA;AAAA,aAAH,CAA5C;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA,mEAAyDjB,QAAzD;;AACA;AACA;AACA,aANA,CAOA;AACA;;;AACA;AACAkB,8CAVA,CAWA;AACA;;AACA;AACA;AACA,aAfA,CAgBA;AACA;AACA;;;AACA;AACA;AACA,aArBA,CAsBA;AACA;AACA;AACA;AACA;;;AACA,gEA3BA,CA4BA;;;AACAC;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACAC;AACA,+CAHA,CAIA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA,gDAFA,CAGA;;AACA,4BAAwBH,qBAAxB,EAA+CA,GAA/C,EAA+C;AAC/C,kCAAkCI,aAAlC;AAAA,kBAAoBC,IAApB,iBAAoBA,IAApB;AAAA,kBAAoBC,KAApB,iBAAoBA,KAApB;;AACA;AACAJ;AACA;AACA;;AACA,6BAAwBF,8BAAxB,EAAuDA,IAAvD,EAAuD;AACvD;AACAE;AACA;AACA;;AACA;AACA;AACA;AACA;AAC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A;AAAA;AAHA;AAKA;AACA;;;AACA,+BACA,WADA,EAEA,eAFA,EAGA,KAHA,EAIA,QAJA,EAKA,MALA,EAMA,QANA,EAOA,QAPA,EAQA,cARA,EASA,YATA,EAUA,YAVA,EAWA,MAXA,EAYA,QAZA;;AAcA;AAAA,0BAAuBC,IAAvB;AAAA;AACA;;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;UACAC;;;;;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,qCAAiCC,qDAAjC,CAPA,CAQA;AACA;;AACA;AACAC;AACA;;AAZA;AAaA;AACA;AACA;AACA;AACA;;;;;eACA;AACA;AACA;eACA;AACA,2BAAuB,+EAAqBC,MAArB,CAAvB;AACA;AACA;;;;eACA;AAAoB;AAAA;eACpB;AACA;AACA;AACA;AACA,eAFA,MAGA;AACA;AACA;;AACA;AACA;AACA;AACA;;;;eACA;AAAoB;AAAA;eACpB;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;;;eACA;AAAqB;AAAA;eACrB;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AAAA;AAA2C;;AAC3C;AAAA;;AACA;AAAA,2DAAwD9C,QAAxD;AAAsE;AAHtE;AAKA;;;iBACA;AACA;AACA;AACA;AACA;;;iBACA;AACA;;AACA;AACA,yDADA,CAEA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;AACA;AACA;AACA;AACA;;;iBACA;AACA;;AACA;AACA;AACA;AACA;;;iBACA;AACA;AACA;;;iBACA;AACA,oCADA,CAEA;AACA;AACA;;;AACA;;AACA,4BAAwBiB,oBAAxB,EAA8CA,GAA9C,EAA8C;AAC9C8B;AACA,aARA,CASA;AACA;;;AACA;;AACA;;AACA;;AACA;;AACA;AACA;;;iBACA;AACA;AACA;;AACA;AACA;AACA,aALA,CAMA;AACA;;;AACA;AACA,+DADA,CAEA;AACA;;AACA;AACAC;AACA;AACA;AACA;;;iBACA;AACA;AACA;AACA;;AACA;AACA,8CACA,sDADA,GAEA,2CAFA;;AAGA;AACA;AACAC;AACA;;AACA;AACAA;AACA;;AACA;AACA;;AACA;AACA;AACAA;AACA;;AACA;AACAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACAC;AACAC;AACAC,iEAA4DC,IAA5D,cAAoEX,UAApE;AACiB,iBAFjB;AAGa,eAJb;AAKA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA,kEACA,iDADA;;AAFA,uCAIAzB,CAJA;AAKAqC;AACA;AACA;AACA;;AACA;AACA;;AACA;AACAjC;AACA6B;AACA;;AACA7B;AAAsCC,8BAAtC;AAAsCC;AAAtC;AACA;AACa,eAZb;AALA;;AAIA,4BAAwBN,8BAAxB,EAAwDA,GAAxD,EAAwD;AAAA,oBAAxDA,CAAwD;AAcxD;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;;AACA;;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,+FACAD,IADA,CACsB,uDAAI,CAAJ,CADtB,EAEAuC,SAFA,CAEA;AAAA;AAAA,eAFA,EAEA;AACA,mEAA8DC,SAA9D,cAA2ExD,QAA3E,eAAwFc,WAAxF;;AACA;AACa,eALb;AAMA;AACA;;;;QA9OA2C;;AAgPAd;AAA6C,mCAA0BtC,gEAAyBA,qDAAzB,CAA1B,EAAuEA,gEAAwBD,gBAAxB,CAAvE,EAAkHC,gEAAwB,aAAxB,CAAlH,EAA2JA,gEAAwBqD,kBAAxB,CAA3J,EAAwMrD,gEAAyBA,uDAAzB,CAAxM;AAAoP,OAAjS;;AACAsC,mCAA6BtC,gEAAwB;AAAG8B,sBAAH;AAAGwB,iCAAH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","names":["iconName","url","literal","SvgIconConfig","MatIconRegistry","_angular_core__WEBPACK_IMPORTED_MODULE_0__","safeUrl","cloneSvg","config","getMatIconNameNotFoundError","namedIcon","filter","map","iconSetConfig","err","iconSetFetchRequests","pipe","i","iconElement","svg","div","attributes","name","value","iconConfig","options","responseType","withCredentials","configNamespace","_angular_common_http__WEBPACK_IMPORTED_MODULE_9__","_angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__","_angular_common__WEBPACK_IMPORTED_MODULE_11__","factory","token","providedIn","type","decorators","args","provide","deps","useFactory","getPathname","attr","MatIcon","rxjs__WEBPACK_IMPORTED_MODULE_13__","elementRef","inline","styleTags","layoutElement","elem","elements","attrs","element","path","funcIriAttributes","subscribe","namespace","_MatIconBase","MAT_ICON_LOCATION","selectors","hostAttrs","hostVars","hostBindings","ctx","inputs","color","svgIcon","fontSet","fontIcon","exportAs","features","ngContentSelectors","decls","vars","template","styles","encapsulation","changeDetection","selector","host","MatIconModule","imports","_angular_material_core__WEBPACK_IMPORTED_MODULE_12__","exports","declarations","EmailCreateComponent","authService","emailService","email","id","to","subject","html","text","from","username","sendEmail","showModal","src_app_auth_auth_service__WEBPACK_IMPORTED_MODULE_2__","_email_service__WEBPACK_IMPORTED_MODULE_3__","EmailFormComponent","_angular_core__WEBPACK_IMPORTED_MODULE_2__","emailForm","_angular_forms__WEBPACK_IMPORTED_MODULE_3__","disabled","invalid","emailSubmit","emit","_a","reset","onCancel","EmailIndexComponent","getEmails","emails","_email_service__WEBPACK_IMPORTED_MODULE_2__","EmailReplayComponent","Object","replace","_angular_core__WEBPACK_IMPORTED_MODULE_3__","EmailResolverService","router","route","state","params","getEmail","navigateByUrl","rxjs__WEBPACK_IMPORTED_MODULE_2__","_email_service__WEBPACK_IMPORTED_MODULE_0__","_angular_router__WEBPACK_IMPORTED_MODULE_3__","EmailShowComponent","snapshot","data","_angular_router__WEBPACK_IMPORTED_MODULE_2__","EmailService","http","get","rootUrl","post","_angular_common_http__WEBPACK_IMPORTED_MODULE_0__","HomeComponent","routes","component","_home_home_component__WEBPACK_IMPORTED_MODULE_2__","children","_not_found_not_found_component__WEBPACK_IMPORTED_MODULE_3__","_email_show_email_show_component__WEBPACK_IMPORTED_MODULE_1__","resolve","_email_resolver_service__WEBPACK_IMPORTED_MODULE_0__","_placeholder_placeholder_component__WEBPACK_IMPORTED_MODULE_4__","InboxRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_7__","InboxModule","_home_home_component__WEBPACK_IMPORTED_MODULE_1__","_email_create_email_create_component__WEBPACK_IMPORTED_MODULE_2__","_email_replay_email_replay_component__WEBPACK_IMPORTED_MODULE_3__","_email_index_email_index_component__WEBPACK_IMPORTED_MODULE_4__","_email_show_email_show_component__WEBPACK_IMPORTED_MODULE_5__","_placeholder_placeholder_component__WEBPACK_IMPORTED_MODULE_6__","_not_found_not_found_component__WEBPACK_IMPORTED_MODULE_7__","_email_form_email_form_component__WEBPACK_IMPORTED_MODULE_9__","_angular_common__WEBPACK_IMPORTED_MODULE_12__","_inbox_routing_module__WEBPACK_IMPORTED_MODULE_0__","_shared_shared_module__WEBPACK_IMPORTED_MODULE_8__","_angular_forms__WEBPACK_IMPORTED_MODULE_13__","_angular_material_button__WEBPACK_IMPORTED_MODULE_14__","_angular_material_icon__WEBPACK_IMPORTED_MODULE_15__","NotFoundComponent","PlaceholderComponent","__webpack_exports__"],"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js","webpack:///src/app/inbox/email-create/email-create.component.ts","webpack:///src/app/inbox/email-form/email-form.component.ts","webpack:///src/app/inbox/email-index/email-index.component.ts","webpack:///src/app/inbox/email-replay/email-replay.component.ts","webpack:///src/app/inbox/email-resolver.service.ts","webpack:///src/app/inbox/email-show/email-show.component.ts","webpack:///src/app/inbox/email.service.ts","webpack:///src/app/inbox/home/home.component.ts","webpack:///src/app/inbox/inbox-routing.module.ts","webpack:///src/app/inbox/inbox.module.ts","webpack:///src/app/inbox/not-found/not-found.component.ts","webpack:///src/app/inbox/placeholder/placeholder.component.ts","webpack:///src/app/inbox/email-create/email-create.component.html","webpack:///src/app/inbox/email-form/email-form.component.html","webpack:///src/app/inbox/email-index/email-index.component.html","webpack:///src/app/inbox/email-replay/email-replay.component.html","webpack:///src/app/inbox/email-show/email-show.component.html","webpack:///src/app/inbox/home/home.component.html","webpack:///src/app/inbox/not-found/not-found.component.html","webpack:///src/app/inbox/placeholder/placeholder.component.html"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, ErrorHandler, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString('<svg></svg>');\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result) ?\n                    new SvgIconConfig(result.url, null, result.options) :\n                    new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler)); };\nMatIconRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i3.DOCUMENT, 8), i0.ɵɵinject(i0.ErrorHandler)); }, token: MatIconRegistry, providedIn: \"root\" });\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, null); })();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() { return this._svgIcon; }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() { return this._fontSet; }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() { return this._fontIcon; }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return parts;\n            default: throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        const styleTags = svg.querySelectorAll('style');\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler)); };\nMatIcon.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 7, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                    '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                    '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, { inline: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = function MatIconModule_Factory(t) { return new (t || MatIconModule)(); };\nMatIconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };\n\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport { Email } from '../email';\nimport { EmailService } from '../email.service';\n\n@Component({\n  selector: 'app-email-create',\n  templateUrl: './email-create.component.html',\n  styleUrls: ['./email-create.component.css']\n})\nexport class EmailCreateComponent implements OnInit {\n  showModal = false;\n  email:Email;\n\n  constructor(private authService:AuthService, private emailService:EmailService) {\n    this.email={\n      id:'',\n      to:'',\n      subject:'',\n      html:'',\n      text:'',\n      from:`${authService.username}@angular-email.com`\n    }\n  }\n\n  ngOnInit() {\n  }\n\n  onSubmit(email:Email){\n    //send the email off via the email service\n    this.emailService.sendEmail(email).subscribe(()=>{\n      this.showModal=false;\n    })\n  }\n\n}\n","import { Component, Input, OnInit, Output, ViewEncapsulation, EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Email } from '../email';\n\n@Component({\n  selector: 'app-email-form',\n  templateUrl: './email-form.component.html',\n  styleUrls: ['./email-form.component.css']\n \n})\nexport class EmailFormComponent implements OnInit {\n  emailForm: FormGroup;\n  @Input() email : Email;\n  @Output() emailSubmit=new EventEmitter();\n  @Output() onCancel=new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit() {\n    const {subject, from, to, text}=this.email;\n    this.emailForm=new FormGroup({\n      to:new FormControl(to, [Validators.required, Validators.email]),\n      from:new FormControl({value:from, disabled:true}),\n      subject:new FormControl(subject, [Validators.required]),\n      text:new FormControl(text,  [Validators.required]),\n    })\n  }\n\n  onSubmit(){\n    if(this.emailForm.invalid){\n      return;\n    }\n\n    this.emailSubmit.emit(this.emailForm.value)\n  }\n\n  onCancelAction(){\n    this.emailForm?.reset();\n    this.onCancel.emit(true);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { EmailService } from '../email.service';\n\n@Component({\n  selector: 'app-email-index',\n  templateUrl: './email-index.component.html',\n  styleUrls: ['./email-index.component.css']\n})\nexport class EmailIndexComponent implements OnInit {\n\n  emails=[];\n\n  constructor(private emailService:EmailService) { }\n\n  ngOnInit() {\n    this.emailService.getEmails().subscribe((emails)=>{\n      this.emails=emails;\n    })\n  }\n\n}\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { Email } from '../email';\nimport { EmailService } from '../email.service';\n\n@Component({\n  selector: 'app-email-replay',\n  templateUrl: './email-replay.component.html',\n  styleUrls: ['./email-replay.component.css']\n})\nexport class EmailReplayComponent implements OnChanges {\n  showModal:boolean=false;\n  @Input() email:Email;\n\n  constructor(private emailService:EmailService) { }\n\n  ngOnChanges() {\n    this.email={\n      ...this.email,\n      from:this.email.to,\n      to:this.email.from,\n      subject:`RE: ${this.email.subject}`,\n      text:`\\n\\n\\n-------- ${this.email.from} wrote:\\n> ${this.email.text.replace(/\\n/gi, '\\n> ')}`\n    }\n  }\n\n  onSubmit(email:Email){\n    this.emailService.sendEmail(email).subscribe(()=>{\n      this.showModal=false;\n    })\n  }\n\n  // setShowModal(value:boolean){\n  //   this.showModal=value;\n  // }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Email } from './email';\nimport { EmailService } from './email.service';\nimport {catchError} from 'rxjs/operators';\nimport {EMPTY} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmailResolverService implements Resolve<Email>{\n\n  constructor(private emailService:EmailService, private router:Router) { }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const { id } = route.params;\n    return this.emailService.getEmail(id).pipe(\n      catchError(()=>{\n        this.router.navigateByUrl('/inbox/not-found');\n        return EMPTY;\n      })\n    )\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Email } from '../email';\n\n@Component({\n  selector: 'app-email-show',\n  templateUrl: './email-show.component.html',\n  styleUrls: ['./email-show.component.css']\n})\nexport class EmailShowComponent implements OnInit {\n  email:Email;\n\n  constructor(private route: ActivatedRoute) { \n     this.email=this.route.snapshot.data.email;\n     this.route.data.subscribe(({email})=>{ \n       this.email=email;\n     })\n    }\n\n  ngOnInit() {\n\n  }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Email } from './email';\n\ninterface EmailSummary {\n  id:string;\n  subject:string;\n  from:string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmailService {\n  rootUrl='https://api.angular-email.com'\n\n  constructor(private http:HttpClient) { }\n\n  getEmails():Observable<EmailSummary[]>{\n    return this.http.get<EmailSummary[]>(`${this.rootUrl}/emails`);\n  }\n\n  getEmail(id:string):Observable<Email>{\n    return this.http.get<Email>(`${this.rootUrl}/emails/${id}`)\n  }\n\n  sendEmail(email:Email){\n    return this.http.post(`${this.rootUrl}/emails`, email);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { EmailResolverService } from './email-resolver.service';\nimport { EmailShowComponent } from './email-show/email-show.component';\nimport { HomeComponent } from './home/home.component';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { PlaceholderComponent } from './placeholder/placeholder.component';\n\n\nconst routes: Routes = [\n  {path:'', component: HomeComponent,\n    children:[\n      {path:'not-found', component:NotFoundComponent},\n      {path:':id', component:EmailShowComponent,\n          resolve:{\n            email:EmailResolverService\n          }},\n      {path:'', component:PlaceholderComponent}\n    ]}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class InboxRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { InboxRoutingModule } from './inbox-routing.module';\nimport { HomeComponent } from './home/home.component';\nimport { EmailCreateComponent } from './email-create/email-create.component';\nimport { EmailReplayComponent } from './email-replay/email-replay.component';\nimport { EmailIndexComponent } from './email-index/email-index.component';\nimport { EmailShowComponent } from './email-show/email-show.component';\nimport { PlaceholderComponent } from './placeholder/placeholder.component';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { EmailFormComponent } from './email-form/email-form.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon'\n\n\n@NgModule({\n  declarations: [HomeComponent, EmailCreateComponent, EmailReplayComponent, EmailIndexComponent, EmailShowComponent, PlaceholderComponent, NotFoundComponent, EmailFormComponent],\n  imports: [\n    CommonModule,\n    InboxRoutingModule,\n    SharedModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatIconModule\n  ]\n})\nexport class InboxModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-placeholder',\n  templateUrl: './placeholder.component.html',\n  styleUrls: ['./placeholder.component.css']\n})\nexport class PlaceholderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"<button mat-button color=\\\"primary\\\" class=\\\"compose-action\\\" (click)=\\\"showModal=true\\\">\\n    <mat-icon>add_circle_outline</mat-icon>\\n    Compose\\n</button>\\n\\n<app-modal (dismiss)=\\\"showModal=false\\\" *ngIf=\\\"showModal\\\">\\n    <h3 modalTitle>Compose</h3>\\n    <app-email-form (emailSubmit)=\\\"onSubmit($event)\\\" (onCancel)=\\\"showModal=false\\\" [email]=\\\"email\\\"></app-email-form>\\n</app-modal>\";","export default \"<form [formGroup]=\\\"emailForm\\\" class=\\\"ui form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n   <app-input label=\\\"To\\\" inputType=\\\"email\\\" [control]=\\\"emailForm.get('to')\\\"></app-input>\\n   <app-input label=\\\"From\\\" inputType=\\\"email\\\" [control]=\\\"emailForm.get('from')\\\"></app-input>\\n   <app-input label=\\\"Subject\\\" inputType=\\\"text\\\" [control]=\\\"emailForm.get('subject')\\\"></app-input>\\n   <app-input controlType=\\\"textarea\\\" label=\\\"Content\\\" [control]=\\\"emailForm.get('text')\\\"></app-input>\\n    <div class=\\\"displayed-buttons\\\">\\n        <button mat-stroked-button color=\\\"accent\\\" (click)=\\\"onCancelAction()\\\">Cancel</button>\\n        <button mat-raised-button color=\\\"accent\\\">Send</button>\\n    </div>\\n</form>\";","export default \"<div class=\\\"ui celled list\\\">\\n    <div class=\\\"item\\\" *ngFor=\\\"let email of emails\\\">\\n        <a [routerLink]=\\\"email.id\\\" routerLinkActive=\\\"active\\\">\\n            <div class=\\\"content\\\">\\n                <div class=\\\"header trim\\\">\\n                    {{email.subject}}\\n                </div>\\n                <p class=\\\"trim\\\">\\n                    {{email.from}}\\n                </p>\\n            </div>\\n        </a>\\n    </div>\\n</div>\";","export default \"<button mat-raised-button color=\\\"accent\\\" (click)=\\\"showModal=true\\\">\\n    Reply\\n</button>\\n\\n<app-modal (dismiss)=\\\"showModal=false\\\" *ngIf=\\\"showModal\\\">\\n    <h3 modalTitle>Reply</h3>\\n    <app-email-form (emailSubmit)=\\\"onSubmit($event)\\\"  (onCancel)=\\\"showModal=false\\\" [email]=\\\"email\\\"></app-email-form>\\n</app-modal>\";","export default \"<div class=\\\"header\\\">\\n    <div>\\n        <h3>{{email.subject}}</h3>\\n        <div>\\n            From: <i>{{email.from}}</i>\\n        </div>\\n        <div>\\n            To: <i>{{email.to}}</i>\\n        </div>\\n    </div>\\n    <div><app-email-replay [email]=\\\"email\\\"></app-email-replay></div>\\n</div>\\n<div class=\\\"ui divider\\\">\\n    <br>\\n    <div [innerHTML]=\\\"email.html\\\">\\n  \\n    </div>\\n</div>\";","export default \"<div class=\\\"ui grid stackable\\\">\\n    <div class=\\\"five wide column\\\">\\n        <app-email-create></app-email-create>\\n        <app-email-index></app-email-index>\\n    </div>\\n    <div class=\\\"eleven wide column\\\">\\n        <router-outlet></router-outlet>\\n    </div>\\n</div>\\n\\n\";","export default \"<div class=\\\"ui placeholder segment\\\">\\n    <div class=\\\"ui icon header\\\">\\n        <i class=\\\"search icon\\\"></i>\\n        Email not found!\\n    </div>\\n</div>\";","export default \"<div class=\\\"ui placeholder segment\\\">\\n    <div class=\\\"ui icon header\\\">\\n        <i class=\\\"envelope outline icon\\\"></i>\\n        Select an email to get started\\n    </div>\\n</div>\";"]}